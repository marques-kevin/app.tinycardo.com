/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/authentication/get_google_authentication_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Google OAuth authentication URL */
        post: operations["AuthenticationController_getGoogleAuthenticationUrl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authentication/authenticate_with_google_code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Authenticate with Google OAuth code */
        post: operations["AuthenticationController_authenticate_with_google_code"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authentication/get_authenticated_user_infos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get authenticated user information */
        post: operations["AuthenticationController_get_authenticated_user_infos"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authentication/delete_account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete user account */
        post: operations["AuthenticationController_delete_account"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cards/get_cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get all cards for a deck */
        post: operations["CardsController_get_cards"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cards/create_card": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new card */
        post: operations["CardsController_create_card"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cards/update_card": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a card */
        post: operations["CardsController_update_card"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cards/delete_card": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a card */
        post: operations["CardsController_delete_card"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/decks/get_decks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get user decks */
        post: operations["DecksController_get_decks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/decks/search_decks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search public decks */
        post: operations["DecksController_search_decks"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/decks/create_deck": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new deck */
        post: operations["DecksController_create_deck"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/decks/update_deck": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a deck */
        post: operations["DecksController_update_deck"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/decks/delete_deck": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Delete a deck (soft delete) */
        post: operations["DecksController_delete_deck"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/decks/duplicate_deck": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Duplicate a deck */
        post: operations["DecksController_duplicate_deck"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/decks/upsert_cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upsert cards in a deck */
        post: operations["DecksController_upsert_cards"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/history/review": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Review a card (mark as known or unknown) */
        post: operations["HistoryController_review_card"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/history/get_deck_history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get review history for a deck */
        post: operations["HistoryController_get_deck_history"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sessions/explain_sentence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["SessionsController_explain_sentence"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        GetGoogleAuthenticationUrlDto: {
            /** @description Callback URL for OAuth redirect */
            callback_url: string;
        };
        AuthenticateWithGoogleCodeDto: {
            /** @description Google OAuth authorization code */
            code: string;
            /** @description Callback URL for OAuth redirect */
            callback_url: string;
            /** @description User preferred language */
            language?: string;
        };
        GetCardsDto: {
            /** @description ID of the deck */
            deck_id: string;
        };
        CardsEntity: {
            /** @description Unique identifier of the card */
            id: string;
            /** @description ID of the deck this card belongs to */
            deck_id: string;
            /** @description Front content of the card */
            front: string;
            /** @description Back content of the card */
            back: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updated_at: string;
        };
        CreateCardDto: {
            /** @description ID of the deck */
            deck_id: string;
            /** @description Front content of the card */
            front: string;
            /** @description Back content of the card */
            back: string;
        };
        UpdateCardDto: {
            /** @description ID of the card to update */
            card_id: string;
            /** @description New front content */
            front?: string;
            /** @description New back content */
            back?: string;
        };
        DeleteCardDto: {
            /** @description ID of the card to delete */
            card_id: string;
        };
        GetDecksDto: {
            /** @description Number of decks to retrieve */
            take?: number;
            /** @description Number of decks to skip */
            skip?: number;
        };
        DecksEntity: {
            /** @description Unique identifier of the deck */
            id: string;
            /** @description Name of the deck */
            name: string;
            /** @description User ID who owns the deck */
            user_id: string;
            /** @description Language of the front side of cards */
            front_language: string;
            /** @description Language of the back side of cards */
            back_language: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updated_at: string;
            /**
             * Format: date-time
             * @description Deletion timestamp (null if not deleted)
             */
            deleted_at: string | null;
        };
        SearchDecksDto: {
            /** @description Number of results per page */
            limit?: number;
            /** @description Page number */
            page?: number;
            /** @description Filter by front language */
            front_language?: string;
            /** @description Filter by back language */
            back_language?: string;
            /** @description Search by title (partial match) */
            title?: string;
        };
        CreateDeckDto: {
            /** @description Name of the deck */
            name: string;
            /** @description Language code for the front of the cards */
            front_language: string;
            /** @description Language code for the back of the cards */
            back_language: string;
        };
        UpdateDeckDto: {
            /** @description ID of the deck to update */
            id: string;
            /** @description New name for the deck */
            name?: string;
            /** @description New front language code */
            front_language?: string;
            /** @description New back language code */
            back_language?: string;
        };
        DeleteDeckDto: {
            /** @description ID of the deck to delete */
            id: string;
        };
        DuplicateDeckDto: {
            /** @description ID of the deck to duplicate */
            deck_id: string;
        };
        UpsertCardsDto: {
            /** @description ID of the deck */
            deck_id: string;
            /** @description Array of cards to upsert */
            cards: {
                /** @description ID of existing card (for update) */
                id?: string;
                /** @description Front content of the card */
                front: string;
                /** @description Back content of the card */
                back: string;
            }[];
        };
        ReviewCardDto: {
            /** @description ID of the card to review */
            card_id: string;
            /**
             * @description Whether the user knows or does not know the card
             * @enum {string}
             */
            status: "known" | "unknown";
        };
        HistoryEntity: {
            /** @description Unique identifier of the history record */
            id: string;
            /** @description User ID who reviewed the card */
            user_id: string;
            /** @description Deck ID the card belongs to */
            deck_id: string;
            /** @description Card ID that was reviewed */
            card_id: string;
            /**
             * @description Number of consecutive successful reviews
             * @example 0
             */
            repetition_count: number;
            /**
             * @description Ease factor for spaced repetition algorithm
             * @example 2.5
             */
            ease_factor: number;
            /**
             * Format: date-time
             * @description Next scheduled review date
             */
            next_due_at: string;
            /**
             * Format: date-time
             * @description Last review timestamp
             */
            last_reviewed_at: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             */
            updated_at: string;
        };
        GetDeckHistoryDto: {
            /** @description ID of the deck */
            deck_id: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AuthenticationController_getGoogleAuthenticationUrl: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetGoogleAuthenticationUrlDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthenticationController_authenticate_with_google_code: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticateWithGoogleCodeDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthenticationController_get_authenticated_user_infos: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthenticationController_delete_account: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CardsController_get_cards: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetCardsDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardsEntity"][];
                };
            };
        };
    };
    CardsController_create_card: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCardDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardsEntity"];
                };
            };
        };
    };
    CardsController_update_card: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCardDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardsEntity"];
                };
            };
        };
    };
    CardsController_delete_card: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteCardDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DecksController_get_decks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetDecksDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DecksEntity"][];
                };
            };
        };
    };
    DecksController_search_decks: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SearchDecksDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DecksController_create_deck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDeckDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DecksEntity"];
                };
            };
        };
    };
    DecksController_update_deck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDeckDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DecksEntity"];
                };
            };
        };
    };
    DecksController_delete_deck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteDeckDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DecksEntity"];
                };
            };
        };
    };
    DecksController_duplicate_deck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DuplicateDeckDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DecksEntity"];
                };
            };
        };
    };
    DecksController_upsert_cards: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpsertCardsDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    HistoryController_review_card: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReviewCardDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryEntity"];
                };
            };
        };
    };
    HistoryController_get_deck_history: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetDeckHistoryDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryEntity"][];
                };
            };
        };
    };
    SessionsController_explain_sentence: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
